(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{168:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return s}));var r=t(1),a=t(9),i=(t(0),t(220)),l={id:"applying-to-regions",title:"Using Filters and Regions"},o={id:"guides/xml-pointers/applying-to-regions",title:"Using Filters and Regions",description:"Regions define areas that can later be applied to [Filters](/docs/modules/mechanics/filters)",source:"@site/docs/guides/xml-pointers/applying-to-regions.mdx",permalink:"/docs/guides/xml-pointers/applying-to-regions",editUrl:"https://github.com/PGMDev/Website/edit/master/docs/guides/xml-pointers/applying-to-regions.mdx",sidebar:"Guides",previous:{title:"Defining Regions",permalink:"/docs/guides/xml-pointers/regions"},next:{title:"Filter Apply Order",permalink:"/docs/guides/xml-pointers/filter-apply-order"}},p=[{value:"Creating a Region",id:"creating-a-region",children:[]},{value:"Creating a Filter",id:"creating-a-filter",children:[]},{value:"Applying a Filter to a Region",id:"applying-a-filter-to-a-region",children:[]},{value:"Applying multiple things to regions",id:"applying-multiple-things-to-regions",children:[]}],c={rightToc:p};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Regions define areas that can later be applied to ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/modules/mechanics/filters"}),"Filters"),"\nand other modules.\nUnderstanding how modules and filters work together is important to make functional mechanics."),Object(i.b)("h2",{id:"creating-a-region"},"Creating a Region"),Object(i.b)("p",null,"Creating a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"docs/modules/mechanics/filters"}),"Region")," involves certain world coordinates.\nIn this example, we will create a simple ",Object(i.b)("inlineCode",{parentName:"p"},"<cuboid/>")," region, which we will save with the ID of ",Object(i.b)("inlineCode",{parentName:"p"},"red-spawn"),"\nwhich we can reference for later use."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'<regions>\n    <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n</regions>\n')),Object(i.b)("h2",{id:"creating-a-filter"},"Creating a Filter"),Object(i.b)("p",null,"Creating a ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/modules/mechanics/filters"}),"Filter")," allows us to put restrictions on certain events.\nWe want to filter players that are entering a region, so we will make a basic filter that matches for\nplayers on a certian team."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'<filters>\n    \x3c!-- Filter will pass ALLOW once all the conditions are met --\x3e\n    <all id="only-red">\n        \x3c!-- is player on the red team? --\x3e\n        <team>red-team</team>\n    </all>\n</filters>\n')),Object(i.b)("h2",{id:"applying-a-filter-to-a-region"},"Applying a Filter to a Region"),Object(i.b)("p",null,"Applying filters to a region is done inside the ",Object(i.b)("inlineCode",{parentName:"p"},"<regions>")," module.\nWhen we make our ",Object(i.b)("inlineCode",{parentName:"p"},"<apply/>")," module, we can use the IDs in our region and filter to reference them.\nOut of the various ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/modules/mechanics/regions#apply-element-attributes"}),"events"),",\nwe will use the ",Object(i.b)("inlineCode",{parentName:"p"},"enter")," event.\nWhen a player enters our region, we want to make sure that only players on the red team are able to enter it.\nSo we apply our ",Object(i.b)("inlineCode",{parentName:"p"},"only-red")," filter to players that are entering the ",Object(i.b)("inlineCode",{parentName:"p"},"red-spawn")," region."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'<regions>\n    <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n    \x3c!-- checks only-red if a player is allowed to enter --\x3e\n    <apply region="red-spawn" enter="only-red"/>\n</regions>\n<filters>\n    \x3c!-- only players on Red will be allowed to enter --\x3e\n    <all id="only-red">\n        <team>red-team</team>\n    </all>\n</filters>\n')),Object(i.b)("h2",{id:"applying-multiple-things-to-regions"},"Applying multiple things to regions"),Object(i.b)("p",null,"Typically we want to prevent players from placing any blocks in spawn,\nso the ",Object(i.b)("inlineCode",{parentName:"p"},"<union>")," element will be used to combine the two spawn regions.\nThen an ",Object(i.b)("inlineCode",{parentName:"p"},"<apply/>")," module can be used for both regions at once.\nThis will use the built-in ",Object(i.b)("inlineCode",{parentName:"p"},"never")," filter, which denies everything."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),'<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n    <apply region="red-spawn" enter="only-red"/>\n    <apply region="blue-spawn" enter="only-blue"/>\n    \x3c!-- denies all block place and block break events in both red-spawn and blue-spawn --\x3e\n    <apply region="spawns" block="never"/>\n</regions>\n<filters>\n    <all id="only-red">\n        <team>red-team</team>\n    </all>\n    <all id="only-blue">\n        <team>red-team</team>\n    </all>\n</filters>\n')))}s.isMDXComponent=!0},220:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},d=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(t),b=r,m=d["".concat(l,".").concat(b)]||d[b]||u[b]||i;return t?a.a.createElement(m,o({ref:n},c,{components:t})):a.a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=b;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);